package com.wbd.cglib.proxy3_008;

/**
 * 静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象,但是有时候目标对象只是一个单独的对象,
 * 并没有实现任何的接口,这个时候就可以使用以目标对象子类的方式类实现代理,这种方法就叫做:Cglib代理
 * 动态代理是内存中动态构建代理对象。
 * Cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展.
 * 
 * JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.
 * Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,
 * 例如Spring AOP和synaop,为他们提供方法的interception(拦截)
 * 
 * @author jwh
 *Cglib子类代理实现方法:
1.需要引入cglib的jar文件,但是Spring的核心包中已经包括了Cglib功能,所以直接引入pring-core-3.2.5.jar即可.
2.引入功能包后,就可以在内存中动态构建子类
3.代理的类不能为final,否则报错
4.目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.
 *
 */
public class TestCglibProxy {

	public static void main(String[] args) {
		Data target = new Data();
		CglibProxy cp = new CglibProxy(target);
		
		Data proxy = (Data) cp.getProxyInstance();
		
		proxy.saveDate();
		
	}

}
